# Configuration for telegraf agent
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = true
  debug = true
  quiet = false

##############################################
# Temperature and Humidity (simple value format)

[[inputs.mqtt_consumer]]
  servers = ["tcp://smarthomepi2:32004"]

  topics = [
    "daten/temperatur/#",
    "daten/luftfeuchtigkeit/#",
  ]

  data_format = "value"
  data_type = "float"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "daten/#"
    measurement = "_/measurement/_"
    tags = "_/_/location"

##############################################
# Electricity JSON data with different time keys
[[inputs.mqtt_consumer]]
  servers = ["tcp://smarthomepi2:32004"]

  topics = [
    "daten/strom/+/Zaehler",
  ]

  ## Data format to consume.
  data_format = "json"

  ## Enable extracting tag values from MQTT topics
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "daten/strom/+/Zaehler"
    measurement = "_/measurement/_/_"
    tags = "_/_/location/_"
    fields = ""

  # Read metrics from MQTT topic(s) with JSON payloads
[[inputs.mqtt_consumer]]
  servers = ["tcp://smarthomepi2:32004"]

  ## Topics that will be subscribed to.
  topics = [
    "data/strom/+/shelly/#",
  ]

  ## Data format to consume.
  data_format = "json"
  json_time_key = "Timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  json_timezone = "Local"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "data/strom/+/shelly/#"
    measurement = "_/measurement/_/_/_"
    tags = "_/_/location/_/device"
    fields = ""

[[inputs.mqtt_consumer]]
  servers = ["tcp://smarthomepi2:32004"]

  ## Topics that will be subscribed to.
  topics = [
    "data/electricity/#",
  ]

  ## Data format to consume.
  data_format = "json"
  json_time_key = "LastDataUpdate"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  json_timezone = "Local"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "data/electricity/#"
    measurement = "_/measurement/_"
    tags = "_/_/location"
    fields = ""


#############################################################
## Charging data

[[inputs.mqtt_consumer]]
  servers = ["tcp://smarthomepi2:32004"]

  topics = [
    "data/charging/BMW",
    "data/charging/Mini",
    "data/charging/VW"
  ]

  ## Data format to consume.
  data_format = "json"
  json_time_key = "lastUpdate"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  json_timezone = "Local"

  ## Use json_query to extract specific fields
  json_query = '''
  {
    "state": "state",
    "chargingStatus": "chargingStatus",
    "chargerConnected": "chargerConnected",
    "chargingTarget": "chargingTarget",
    "chargingEndTime": "chargingEndTime"
  }
  '''

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "data/charging/+"
    measurement = "_/measurement/_"
    tags = "_/_/car"
    
[[inputs.mqtt_consumer]]
  servers = ["tcp://smarthomepi2:32004"]

  ## Topics that will be subscribed to.
  topics = [
    "data/charging/KebaOutside",
    "data/charging/KebaGarage"
  ]

  ## Data format to consume.
  data_format = "json"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  json_timezone = "Local"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "data/charging/+"
    measurement = "_/measurement/_"
    tags = "_/_/device"
    fields = ""

[[inputs.mqtt_consumer]]
  servers = ["tcp://smarthomepi2:32004"]

  ## Topics that will be subscribed to.
  topics = [
    "data/charging/situation",
  ]

  ## Data format to consume.
  data_format = "json"

  ## Use json_query to extract specific fields
  json_query = '''
  {
    "InsideConnected": "InsideConnected",
    "OutsideConnected": "OutsideConnected",
    "HouseConsumptionPower": "HouseConsumptionPower",
    "InsideCurrentChargingPower": "InsideCurrentChargingPower",
    "OutsideCurrentChargingPower": "OutsideCurrentChargingPower",
    "PowerFromPV": "PowerFromPV",
    "PowerFromGrid": "PowerFromGrid",
    "PowerFromBattery": "PowerFromBattery",
    "BatteryLevel": "BatteryLevel",
    "InsideChargingLatestmA": "InsideChargingLatestmA",
    "OutsideChargingLatestmA": "OutsideChargingLatestmA",
    "BMWBatteryLevel": "BMWBatteryLevel",
    "BMWReadyForCharging": "BMWReadyForCharging",
    "VWBatteryLevel": "VWBatteryLevel",
    "VWReadyForCharging": "VWReadyForCharging"
  }
  '''

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "data/charging/situation"
    measurement = "_/measurement/_"
    tags = "_/_/type"

#############################################################
## Outputs

# Output for general metrics
[[outputs.influxdb_v2]]
  urls = ["http://smarthomepi2:32086"]
  token = "$INFLUX_TOKEN"
  organization = "smarthome"
  bucket = "SmartHomeData"
  
  # Exclude charging metrics
  [outputs.influxdb_v2.tagdrop]
    topic = ["data/charging/*"]

# Output for charging metrics
[[outputs.influxdb_v2]]
  urls = ["http://smarthomepi2:32086"]
  token = "$INFLUX_TOKEN"
  organization = "smarthome"
  bucket = "Smarthome_Charging"
  
  # Only include charging metrics
  [outputs.influxdb_v2.tagpass]
    topic = ["data/charging/*"]