@using DataContracts
@using MQTTnet
@using MQTTnet.Client
@using SmartHomeWebManagers
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.LinearGauge
@using System.Text.Json
@using SharedContracts
@using MouseEventArgs = Microsoft.AspNetCore.Components.Web.MouseEventArgs
@using Placement = Syncfusion.Blazor.Inputs.Placement
@using Orientation = Syncfusion.Blazor.LinearGauge.Orientation
@using Syncfusion.Blazor.Popups

@page "/chargingsettings"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<h3>Lade-Einstellungen</h3>

<h4>Quellen und Verbräuche</h4>

<div class="BatteryComponent">
    <div class="BatteryLabel">Batterie Ladestand: @_chargingSituation.BatteryLevel%</div>
    <div class="BatteryContainer">
        <div class="BatteryLevel" style="width: @_chargingSituation.BatteryLevel%"></div>
    </div>
</div>

<div class="LegendContainer">
    <div>
        <div class="LegendColorIndicator" style="background-color: #0dcaf0"></div>
        <div class="LegendText">PV: @_chargingSituation.PowerFromPV.ToString("#,##0 W")</div>
    </div>
    <div>
        <div class="LegendColorIndicator" style="background-color: greenyellow"></div>
        <div class="LegendText">Batterie: @FormatPower(_chargingSituation.PowerFromBattery)</div>
    </div>
    <div>
        <div class="LegendColorIndicator" style="background-color: #f72585"></div>
        <div class="LegendText">Netz: @FormatPower(_chargingSituation.PowerFromGrid)</div>
    </div>
    <div>
        <div class="LegendColorIndicator" style="background-color: goldenrod"></div>
        <div class="LegendText">Haus Verbrauch: @FormatPower(_chargingSituation.HouseConsumptionPower-_chargingSituation.OutsideCurrentChargingPower-_chargingSituation.InsideCurrentChargingPower)</div>
    </div>
    <div>
        <div class="LegendColorIndicator" style="background-color: #614680"></div>
        <div class="LegendText">Laden BMW: @FormatPower(_chargingSituation.InsideCurrentChargingPower)</div>
    </div>
    <div>
        <div class="LegendColorIndicator" style="background-color: #be8ce5"></div>
        <div class="LegendText">Laden ID4: @FormatPower(_chargingSituation.OutsideCurrentChargingPower)</div>
    </div>
</div>

<div class="AvailabilityComponent">
    <div class="AvailabilityLevel" style="width: @(availabilityData.PVPowerPercent)%; background-color: #0dcaf0"></div>
    <div class="AvailabilityLevel" style="width: @(availabilityData.BatteryPowerPercent)%; background-color: greenyellow"></div>
    <div class="AvailabilityLevel" style="width: @(availabilityData.GridPowerPercent)%; background-color: #f72585"></div>
</div>

<div class="AvailabilityComponent">
    <div class="AvailabilityLevel" style="width: @(consumptionData.HouseConsumption)%; background-color: goldenrod"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.BatteryCharging)%; background-color: greenyellow"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.GridFeed)%; background-color: #f72585"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.GarageCharging)%; background-color: #614680"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.OutsideCharging)%; background-color: #be8ce5"></div>
</div>

<h4>Lade-Einstellungen</h4>


<div class="stepsGrid">
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Laden ist deaktiviert">
        <div class="stepsBox stepsBox-active" @onclick="ChargingOff">0</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto nur mit PV-Überschuss der 3,8 KW übersteigt">
        <div class="stepsBox @(chargingLevel >= 1 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel1">1</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto wenn der PV-Überschuss die Mindestladeleistung übersteigt">
        <div class="stepsBox @(chargingLevel >= 2 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel2">2</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto wenn der PV-Überschuss plus Batteriekapazität die Mindestladeleistung übersteigt und die Batterie zu mehr als 50% geladen ist">
        <div class="stepsBox @(chargingLevel >= 3 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel3">3</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto mit mindestens der Mindestladeleistung">
        <div class="stepsBox @(chargingLevel >= 4 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel4">4</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto mit 8 Kw">
        <div class="stepsBox @(chargingLevel >= 5 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel5">5</div>
    </SfTooltip>

    <div>Aus</div>
    <div>Übersch. mit Batterie-Prio</div>
    <div>Übersch. mit Auto-Prio</div>
    <div>PV + Batterie-Laden</div
    <div>Sofort-Laden</div>
    <div>Schnell-Laden</div>
</div>



<div style="margin-top:40px"></div>
Bis zu welchem Ladestand der Batterie kann das Auto auch mit Batteriestrom geladen werden?
<SfSlider @bind-Value="@_batteryMinLevel" Min=0 Max=100 TValue="int">
    <SliderTicks Placement="@Placement.After" SmallStep="5" LargeStep="20" ShowSmallTicks="true"></SliderTicks>
    <SliderEvents TValue="int">
    </SliderEvents>
</SfSlider>
<br />
<br />
<SfCheckBox @bind-Checked="@_useManualCharging" Label="Manuelles Laden aktivieren"></SfCheckBox>
<br />
<br />
Manueller Ladestrom (A):
<SfSlider @bind-Value="@_manualCurrent" Min=6 Max=16 TValue="int" Enabled="@_useManualCharging">
    <SliderTicks Placement="@Placement.After" SmallStep="5" LargeStep="10" ShowSmallTicks="true"></SliderTicks>
    <SliderEvents TValue="int">
    </SliderEvents>
</SfSlider>
<br />
<br />

<SfButton IsPrimary="true" @onclick="CommunicateSettings">Übernehmen</SfButton>

@code {
    private int _batteryMinLevel = 30;
    private int _manualCurrent = 6;
    private bool _useManualCharging = false;
    ChargingSituation _chargingSituation = new ChargingSituation();
    private AvailabilityData availabilityData = new AvailabilityData(); 
    private ConsumptionData consumptionData = new ConsumptionData();
    private int chargingLevel = 0;

    IMqttClient? _mqttClient;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var factory = new MqttFactory();
            _mqttClient = factory.CreateMqttClient();
            MQTTConnectAsync();
            ChargingOff(null);
        }

        base.OnAfterRender(firstRender);
    }

    private void ManualChargingChanged(bool value)
    {
        _useManualCharging = value;
    }

    private string FormatPower(int value)
    {
        return value.ToString("#,##0 W");
    }

    private async void ChargingOff(MouseEventArgs e)
    {
        chargingLevel = 0;
        await MQTTConnectAsync();
        var applicationMessage = new MqttApplicationMessageBuilder()
            .WithTopic($"config/charging/BatteryMinLevel")
            .WithPayload("0")
            .Build();
        await _mqttClient.PublishAsync(applicationMessage, CancellationToken.None);
        StateHasChanged();
    }

    private async void ChargingLevel1(MouseEventArgs e)
    {
        chargingLevel = 1;
        await MQTTConnectAsync();
        var applicationMessage = new MqttApplicationMessageBuilder()
            .WithTopic($"config/charging/BatteryMinLevel")
            .WithPayload("6000")
            .Build();
        await _mqttClient.PublishAsync(applicationMessage, CancellationToken.None);
        StateHasChanged();
    }

    private async void ChargingLevel2(MouseEventArgs e)
    {
        chargingLevel = 2;
        StateHasChanged();
    }
    private async void ChargingLevel3(MouseEventArgs e)
    {
        chargingLevel = 3;
        StateHasChanged();
    }
    private async void ChargingLevel4(MouseEventArgs e)
    {
        chargingLevel = 4;
        StateHasChanged();
    }
    private async void ChargingLevel5(MouseEventArgs e)
    {
        chargingLevel = 5;
        StateHasChanged();
    }

    private async void CommunicateSettings(MouseEventArgs e)
    {
        await MQTTConnectAsync();
        var applicationMessage = new MqttApplicationMessageBuilder()
            .WithTopic($"config/charging/BatteryMinLevel")
            .WithPayload(_batteryMinLevel.ToString())
            .Build();
        await _mqttClient.PublishAsync(applicationMessage, CancellationToken.None);
        applicationMessage = new MqttApplicationMessageBuilder()
            .WithTopic($"config/charging/ManualCurrent")
            .WithPayload(_useManualCharging ? (_manualCurrent * 1000).ToString() : "-1")
            .Build();
        await _mqttClient.PublishAsync(applicationMessage, CancellationToken.None);
    }

    async Task MQTTConnectAsync()
    {
        var mqttOptions = new MqttClientOptionsBuilder()
            .WithTcpServer("smarthomepi2", 32004)
            .WithClientId("Smarthome.Web")
            .WithKeepAlivePeriod(new TimeSpan(0, 1, 0, 0))
            .Build();

        while (true)
        {
            if (_mqttClient.IsConnected)
            {
                Console.WriteLine("Connected to MQTT Broker.");

                _mqttClient.ApplicationMessageReceivedAsync -= MqttMessageReceived;
                _mqttClient.ApplicationMessageReceivedAsync += MqttMessageReceived;

                await _mqttClient.SubscribeAsync(new MqttTopicFilterBuilder().WithTopic("data/charging/situation").Build());
                break;
            }

            try
            {
                await _mqttClient.ConnectAsync(mqttOptions);
                Task.Delay(1000).Wait();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to MQTT Broker: {ex.Message}");
                Thread.Sleep(5000);
            }
        }
    }

    private async Task MqttMessageReceived(MqttApplicationMessageReceivedEventArgs args)
    {
        string payload = args.ApplicationMessage.ConvertPayloadToString();
        var topic = args.ApplicationMessage.Topic;
        var time = DateTime.Now;

        Console.WriteLine($"Received message from {topic} at {time}: {payload}");

        try
        {
            _chargingSituation = JsonSerializer.Deserialize<ChargingSituation>(payload);
            availabilityData = ChargingSituationManager.CalculateAvailabilityData(
                _chargingSituation.PowerFromPV,
                _chargingSituation.PowerFromBattery,
                _chargingSituation.PowerFromGrid);
            consumptionData = ChargingSituationManager.CalculateConsumptionData(
                _chargingSituation.HouseConsumptionPower - _chargingSituation.InsideCurrentChargingPower - _chargingSituation.OutsideCurrentChargingPower,
                _chargingSituation.PowerFromBattery, 
                _chargingSituation.PowerFromGrid,
                _chargingSituation.InsideCurrentChargingPower,
                _chargingSituation.OutsideCurrentChargingPower);
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing message: {ex.Message}");
        }
    }

}
