@using DataContracts
@using MQTTnet.Protocol
@using SmartHome.Web.Components.UIComponents
@using SmartHome.Web.Services
@using SmartHomeWebManagers
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.LinearGauge
@using System.Text.Json
@using SharedContracts
@using MouseEventArgs = Microsoft.AspNetCore.Components.Web.MouseEventArgs
@using Placement = Syncfusion.Blazor.Inputs.Placement
@using Orientation = Syncfusion.Blazor.LinearGauge.Orientation
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars

@page "/chargingoverview"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject MqttService MqttService
@inject IChargingSessionService ChargingSessionService


<h3>Lade-Einstellungen</h3>

<h4>Quellen und Verbräuche</h4>

<div class="BatteryComponent">
    <div class="BatteryLabel">Batterie Ladestand: @_chargingSituation.BatteryLevel%</div>
    <div class="BatteryContainer">
        <div class="BatteryLevel" style="width: @_chargingSituation.BatteryLevel%"></div>
    </div>
</div>

<div class="LegendContainer">
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: #0dcaf0"></div>
        <div class="LegendText">PV: <span class="nowrap">@_chargingSituation.PowerFromPV.ToString("#,##0 W")</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: greenyellow"></div>
        <div class="LegendText">Batterie: <span class="nowrap">@FormatPower(_chargingSituation.PowerFromBattery)</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: #f72585"></div>
        <div class="LegendText">Netz: <span class="nowrap">@FormatPower(_chargingSituation.PowerFromGrid)</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: goldenrod"></div>
        <div class="LegendText">Haus: <span class="nowrap">@FormatPower(_chargingSituation.HouseConsumptionPower-_chargingSituation.OutsideCurrentChargingPower-_chargingSituation.InsideCurrentChargingPower)</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: #614680"></div>
        <div class="LegendText">Garage: <span class="nowrap">@FormatPower(_chargingSituation.InsideCurrentChargingPower)</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: #be8ce5"></div>
        <div class="LegendText">Außen: <span class="nowrap">@FormatPower(_chargingSituation.OutsideCurrentChargingPower)</span></div>
    </div>
</div>

<div class="AvailabilityComponent">
    <div class="AvailabilityLevel" style="width: @(availabilityData.PVPowerPercent)%; background-color: #0dcaf0"></div>
    <div class="AvailabilityLevel" style="width: @(availabilityData.BatteryPowerPercent)%; background-color: greenyellow"></div>
    <div class="AvailabilityLevel" style="width: @(availabilityData.GridPowerPercent)%; background-color: #f72585"></div>
</div>

<div class="AvailabilityComponent">
    <div class="AvailabilityLevel" style="width: @(consumptionData.HouseConsumption)%; background-color: goldenrod"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.BatteryCharging)%; background-color: greenyellow"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.GridFeed)%; background-color: #f72585"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.GarageCharging)%; background-color: #614680"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.OutsideCharging)%; background-color: #be8ce5"></div>
</div>

<h4>Lade-Einstellungen</h4>


<div class="stepsGrid">
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Laden ist deaktiviert">
        <div class="stepsBox stepsBox-active" @onclick="ChargingOff">0</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto nur mit PV-Überschuss der 3,8 KW übersteigt">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 1 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel1">1</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto wenn der PV-Überschuss die Mindestladeleistung übersteigt">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 2 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel2">2</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto wenn der PV-Überschuss plus Batteriekapazität die Mindestladeleistung übersteigt und die Batterie zu mehr als 50% geladen ist">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 3 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel3">3</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto mit mindestens der Mindestladeleistung">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 4 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel4">4</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto mit 8 Kw">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 5 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel5">5</div>
    </SfTooltip>

    <div>Aus</div>
    <div>PV-Laden mit Batterie-Prio</div>
    <div>PV-Laden mit Auto-Prio</div>
    <div>PV + Batterie-Laden</div>
    <div>Sofort-Laden</div>
    <div>Schnell-Laden</div>
</div>

<div>
    <div class="carsGrid">
        <CarStatusDataVisualizer 
        CarStatusData="@bwmStatusData"  
        @bind-IsChargingEnabled="chargingSettings.InsideChargingEnabled"  
        @bind-PreferedChargingStation="chargingSettings.PreferedChargingStation" 
        CurrentChargingSessionEnergy="_chargingSituation.InsideChargingCurrentSessionWh/1000"
        SetChargingStation="@ChargingStation.Inside"
        CommunicateSettings="CommunicateSettings"/>
        <CarStatusDataVisualizer 
        CarStatusData="@miniStatusData" 
        @bind-IsChargingEnabled="chargingSettings.OutsideChargingEnabled" 
        @bind-PreferedChargingStation="chargingSettings.PreferedChargingStation" 
        CurrentChargingSessionEnergy="_chargingSituation.OutsideChargingCurrentSessionWh/1000"
        SetChargingStation="@ChargingStation.Outside"
        CommunicateSettings="CommunicateSettings"/>
        <CarStatusDataVisualizer 
        CarStatusData="@vwStatusData" 
        @bind-IsChargingEnabled="chargingSettings.OutsideChargingEnabled" 
        @bind-PreferedChargingStation="chargingSettings.PreferedChargingStation"
        CurrentChargingSessionEnergy="_chargingSituation.OutsideChargingCurrentSessionWh/1000"
        SetChargingStation="@ChargingStation.Outside"
        CommunicateSettings="CommunicateSettings"/>
    </div>
</div>

<div>
    <div style="display: flex; align-items: center; gap: 1rem;">
        <!-- Month Dropdown -->
        <SfDropDownList @bind-Value="SelectedMonth" DataSource="Months" Width="50%" Placeholder="Select Month" />

        <!-- Car Selection Checkboxes -->
        <div>
            <SfCheckBox @bind-Checked="SelectedCars.BMW" @onchange="OnCarSelectionChanged">BMW</SfCheckBox>
            <SfCheckBox @bind-Checked="SelectedCars.Mini" @onchange="OnCarSelectionChanged">Mini</SfCheckBox>
            <SfCheckBox @bind-Checked="SelectedCars.VW" @onchange="OnCarSelectionChanged">VW</SfCheckBox>
        </div>
    </div>

    <SfGrid ID="ChargingSessions" @ref="ChargingSessionsGrid" DataSource="@FilteredChargingSessions" AllowPaging="false" AllowSorting="true" Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })" AllowExcelExport="true" AllowPdfExport="true">
        <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ChargingSession"></GridEvents>
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field=@nameof(ChargingSession.EnergyOfChargingSession) Type="AggregateType.Sum" Format="#,##0.00 KWh">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>Summe: @aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>
        <GridColumns>
            <GridColumn Field="WallboxName" HeaderText="Wallbox"></GridColumn>
            <GridColumn Field="ChargedCar" HeaderText="Fahrzeug"></GridColumn>
            <GridColumn Field="SessionId" HeaderText="Ladesitzung"></GridColumn>
            <GridColumn Field="StartTime" HeaderText="Start" Format="dd.MM.yyyy HH:mm"></GridColumn>
            <GridColumn Field="EndTime" HeaderText="Ende" Format="dd.MM.yyyy HH:mm"></GridColumn>
            <GridColumn Field="EnergyOfChargingSession" Format="#,##0.00 KWh" TextAlign="TextAlign.Right" HeaderText="Ladeenergie"></GridColumn>
            <GridColumn Field="TatalEnergyAtStart" Format="#,##0.00 KWh" TextAlign="TextAlign.Right" HeaderText="Energie gesamt"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>

@code {
    private class CarSelection
    {
        public bool BMW { get; set; }
        public bool Mini { get; set; }
        public bool VW { get; set; }
    }

    private CarSelection SelectedCars = new CarSelection();
    private List<ChargingSession> FilteredChargingSessions = new();

    private SfGrid<ChargingSession> ChargingSessionsGrid;
    private int _batteryMinLevel = 30;
    private int _manualCurrent = 6;
    private bool _useManualCharging = false;
    ChargingSituation _chargingSituation = new ();
    private CarStatusData bwmStatusData = new();
    private CarStatusData miniStatusData = new();
    private CarStatusData vwStatusData = new();

    private AvailabilityData availabilityData = new (); 
    private ConsumptionData consumptionData = new ();
    private SharedContracts.ChargingSettings chargingSettings = new ();

    private List<ChargingSession> ChargingSessions = new();
    private string SelectedMonth = DateTime.Now.ToString("MMMM yyyy");
    private List<string> Months = []; 

    protected override async Task OnInitializedAsync()
    {
        UpdateChargingSituation();
        UpdateChargingSettings();

        MqttService.OnMessageReceived += UpdateData;
        await LoadChargingSessions();
        await FillMonthSelectionList();

        ApplyCarFilter();
    }

    private void ApplyCarFilter()
    {
        FilteredChargingSessions = ChargingSessions.Where(session =>
            (SelectedCars.BMW && session.ChargedCar == "BMW") ||
            (SelectedCars.Mini && session.ChargedCar == "Mini") ||
            (SelectedCars.VW && session.ChargedCar == "VW") ||
            (!SelectedCars.BMW && !SelectedCars.Mini && !SelectedCars.VW) // Show all if no car is selected
        ).ToList();
    }

    private async void OnCarSelectionChanged(ChangeEventArgs args)
    {
        ApplyCarFilter();
        await InvokeAsync(StateHasChanged);
    }

    private async Task FillMonthSelectionList()
    {
        Months = new List<string>();
        var timerange = await ChargingSessionService.GetChargingSessionsTimeRange();

        // Create a Month/Year entry for each month between start and end in timerange
        if (timerange.EarliestStartTime is null || timerange.LatestStartTime is null)
            return;
        var startDate = new DateTime(timerange.EarliestStartTime.Value.Year, timerange.EarliestStartTime.Value.Month, 1);
        var endDate = new DateTime(timerange.LatestStartTime.Value.Year, timerange.LatestStartTime.Value.Month, 1);
        for (var date = startDate; date <= endDate; date = date.AddMonths(1))
        {
            Months.Add(date.ToString("MMMM yyyy"));
        }
    }

    private async Task LoadChargingSessions()
    {
        var monthStart = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        if (!string.IsNullOrEmpty(SelectedMonth))
        {
            var selectedDate = DateTime.ParseExact(SelectedMonth, "MMMM yyyy", null);
            monthStart = new DateTime(selectedDate.Year, selectedDate.Month, 1);
        }
        var monthEnd = monthStart.AddMonths(1).AddSeconds(-1);

        ChargingSessions = await ChargingSessionService.GetChargingSessionsAsync(monthStart, monthEnd);
    }

    private void UpdateData(object sender, MqttMessageReceivedEventArgs args)
    {
        if (args.Topic.StartsWith("data/charging/"))
        {
            UpdateChargingSituation();
        }
        else if (args.Topic == "config/charging/settings")
        {
            UpdateChargingSettings();
        }
    }

    private void UpdateChargingSituation()
    {
        _chargingSituation = MqttService.ChargingSituation;
        bwmStatusData = MqttService.BmwStatusData ?? new CarStatusData();
        miniStatusData = MqttService.MiniStatusData ?? new CarStatusData();
        vwStatusData = MqttService.VwStatusData ?? new CarStatusData();

        availabilityData = ChargingSituationManager.CalculateAvailabilityData(
            _chargingSituation.PowerFromPV,
            _chargingSituation.PowerFromBattery,
            _chargingSituation.PowerFromGrid);
        consumptionData = ChargingSituationManager.CalculateConsumptionData(
            _chargingSituation.HouseConsumptionPower - _chargingSituation.InsideCurrentChargingPower - _chargingSituation.OutsideCurrentChargingPower,
            _chargingSituation.PowerFromBattery, 
            _chargingSituation.PowerFromGrid,
            _chargingSituation.InsideCurrentChargingPower,
            _chargingSituation.OutsideCurrentChargingPower);
        InvokeAsync(StateHasChanged);
    }

    private void UpdateChargingSettings()
    {
        chargingSettings = MqttService.ChargingSettings;
        InvokeAsync(StateHasChanged);
    }

    private string FormatPower(int value)
    {
        return value.ToString("#,##0 W");
    }

    private async void ChargingOff(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 0;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }
    private async void ChargingLevel1(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 1;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }
    private async void ChargingLevel2(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 2;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }
    private async void ChargingLevel3(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 3;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }
    private async void ChargingLevel4(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 4;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }
    private async void ChargingLevel5(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 5;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }

    private async Task CommunicateSettings()
    {
        await MqttService.PublishAsync(
            "config/charging/settings",
            JsonSerializer.Serialize(chargingSettings),
            MqttQualityOfServiceLevel.AtLeastOnce,
            true);
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "ChargingSessions_excelexport") 
        {
            await this.ChargingSessionsGrid.ExportToExcelAsync();
        }
        if (args.Item.Id == "ChargingSessions_pdfexport") 
        {
            await this.ChargingSessionsGrid.ExportToPdfAsync();
        }
    }
}
