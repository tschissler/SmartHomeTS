@using DataContracts
@using MQTTnet
@using MQTTnet.Client
@using MQTTnet.Protocol
@using SmartHome.Web.Services
@using SmartHomeWebManagers
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.LinearGauge
@using System.Text.Json
@using SharedContracts
@using MouseEventArgs = Microsoft.AspNetCore.Components.Web.MouseEventArgs
@using Placement = Syncfusion.Blazor.Inputs.Placement
@using Orientation = Syncfusion.Blazor.LinearGauge.Orientation
@using Syncfusion.Blazor.Popups

@page "/chargingoverview"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject MQTTService MqttService

<h3>Lade-Einstellungen</h3>

<h4>Quellen und Verbräuche</h4>

<div class="BatteryComponent">
    <div class="BatteryLabel">Batterie Ladestand: @_chargingSituation.BatteryLevel%</div>
    <div class="BatteryContainer">
        <div class="BatteryLevel" style="width: @_chargingSituation.BatteryLevel%"></div>
    </div>
</div>

<div class="LegendContainer">
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: #0dcaf0"></div>
        <div class="LegendText">PV: <span class="nowrap">@_chargingSituation.PowerFromPV.ToString("#,##0 W")</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: greenyellow"></div>
        <div class="LegendText">Batterie: <span class="nowrap">@FormatPower(_chargingSituation.PowerFromBattery)</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: #f72585"></div>
        <div class="LegendText">Netz: <span class="nowrap">@FormatPower(_chargingSituation.PowerFromGrid)</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: goldenrod"></div>
        <div class="LegendText">Haus: <span class="nowrap">@FormatPower(_chargingSituation.HouseConsumptionPower-_chargingSituation.OutsideCurrentChargingPower-_chargingSituation.InsideCurrentChargingPower)</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: #614680"></div>
        <div class="LegendText">BMW: <span class="nowrap">@FormatPower(_chargingSituation.InsideCurrentChargingPower)</span></div>
    </div>
    <div class="LegendGroup">
        <div class="LegendColorIndicator" style="background-color: #be8ce5"></div>
        <div class="LegendText">ID4: <span class="nowrap">@FormatPower(_chargingSituation.OutsideCurrentChargingPower)</span></div>
    </div>
</div>

<div class="AvailabilityComponent">
    <div class="AvailabilityLevel" style="width: @(availabilityData.PVPowerPercent)%; background-color: #0dcaf0"></div>
    <div class="AvailabilityLevel" style="width: @(availabilityData.BatteryPowerPercent)%; background-color: greenyellow"></div>
    <div class="AvailabilityLevel" style="width: @(availabilityData.GridPowerPercent)%; background-color: #f72585"></div>
</div>

<div class="AvailabilityComponent">
    <div class="AvailabilityLevel" style="width: @(consumptionData.HouseConsumption)%; background-color: goldenrod"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.BatteryCharging)%; background-color: greenyellow"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.GridFeed)%; background-color: #f72585"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.GarageCharging)%; background-color: #614680"></div>
    <div class="AvailabilityLevel" style="width: @(consumptionData.OutsideCharging)%; background-color: #be8ce5"></div>
</div>

<h4>Lade-Einstellungen</h4>


<div class="stepsGrid">
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Laden ist deaktiviert">
        <div class="stepsBox stepsBox-active" @onclick="ChargingOff">0</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto nur mit PV-Überschuss der 3,8 KW übersteigt">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 1 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel1">1</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto wenn der PV-Überschuss die Mindestladeleistung übersteigt">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 2 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel2">2</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto wenn der PV-Überschuss plus Batteriekapazität die Mindestladeleistung übersteigt und die Batterie zu mehr als 50% geladen ist">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 3 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel3">3</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto mit mindestens der Mindestladeleistung">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 4 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel4">4</div>
    </SfTooltip>
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopCenter" Content="Lädt das Auto mit 8 Kw">
        <div class="stepsBox @(chargingSettings.ChargingLevel >= 5 ? "stepsBox-active" : "stepsBox-inactive")" @onclick="ChargingLevel5">5</div>
    </SfTooltip>

    <div>Aus</div>
    <div>PV-Laden mit Batterie-Prio</div>
    <div>PV-Laden mit Auto-Prio</div>
    <div>PV + Batterie-Laden</div
    <div>Sofort-Laden</div>
    <div>Schnell-Laden</div>
</div>

<div>
    <div class="carsGrid">
        <div class="carBox">
            <img class="carImage" src="/images/BMW.webp" />
            <div class="carControls">
                <img class="carConnectedIcon" src="/images/@(_chargingSituation.InsideConnected ? "connected.svg" : "disconnected.svg")" />
                <img src="/images/@(chargingSettings.InsideChargingEnabled ? (
                    chargingSettings.PreferedChargingStation == ChargingStation.Inside ? "dblchecked.svg" : "checked.svg" ) : "unchecked.svg")" 
                    @onclick="() => 
                    {
                        chargingSettings.InsideChargingEnabled = !chargingSettings.InsideChargingEnabled;
                        CommunicateSettings();
                    }"
                    @ondblclick="() => 
                    {
                        chargingSettings.InsideChargingEnabled = true; 
                        chargingSettings.PreferedChargingStation = ChargingStation.Inside;
                        CommunicateSettings();
                    }"/>
                    <div class="batteryInformationContainer">
                        <div class="batteryBorder">
                            <div class="batteryLevel" style="height: @_chargingSituation.BMWBatteryLevel%"></div>
                        </div>
                        <div class="batteryLabel">
                        @_chargingSituation.BMWBatteryLevel %<br/>
                        <span style="font-size: 0.7rem">@(new MarkupString(_chargingSituation.BMWLastUpdateFromServer.ToLocalTime().ToString("dd.MM.yy hh:mm:ss").Replace(" ", "<br>")))</span>
                        </div>
                    </div> 
            </div>
        </div>
        <div class="carBox">
            <img class="carImage" src="/images/ID4.png" />
            <div class="carControls">
                <img class="carConnectedIcon" 
                    src="/images/@(_chargingSituation.OutsideConnected ? (_chargingSituation.VWReadyForCharging ? "connected.svg" : "connectednotready.svg") : "disconnected.svg")" />
                <img src="images/@(chargingSettings.OutsideChargingEnabled ? (
                    chargingSettings.PreferedChargingStation == ChargingStation.Outside ? "dblchecked.svg" : "checked.svg") : "unchecked.svg" )"
                    @onclick="() => 
                    {
                        chargingSettings.OutsideChargingEnabled = !chargingSettings.OutsideChargingEnabled;
                        CommunicateSettings();
                    }"
                    @ondblclick="() => 
                    {
                        chargingSettings.OutsideChargingEnabled = true; 
                        chargingSettings.PreferedChargingStation = ChargingStation.Outside;
                        CommunicateSettings();
                    }"/>
                    <div class="batteryInformationContainer">
                        <div class="batteryBorder">
                            <div class="batteryLevel" style="height: @_chargingSituation.VWBatteryLevel%"></div>
                        </div>
                        <div class="batteryLabel">
                        @_chargingSituation.VWBatteryLevel %<br/>
                        <span style="font-size: 0.7rem">@(new MarkupString(_chargingSituation.VWLastUpdateFromServer.ToLocalTime().ToString("dd.MM.yy hh:mm:ss").Replace(" ", "<br>")))</span>
                        </div>
                    </div> 
            </div>
        </div>
    </div>
</div>
@code {
    private int _batteryMinLevel = 30;
    private int _manualCurrent = 6;
    private bool _useManualCharging = false;
    ChargingSituation _chargingSituation = new ();
    private AvailabilityData availabilityData = new (); 
    private ConsumptionData consumptionData = new ();
    private SharedContracts.ChargingSettings chargingSettings = new ();

    IMqttClient? _mqttClient;

    protected override void OnInitialized()
    {
        UpdateChargingSituation();
        UpdateChargingSettings();

        MqttService.OnMessageReceived += UpdateData;
    }

    private void UpdateData(object sender, MqttMessageReceivedEventArgs args)
    {
        if (args.Topic == "data/charging/situation")
        {
            UpdateChargingSituation();
        }
        else if (args.Topic == "config/charging/settings")
        {
            UpdateChargingSettings();
        }
    }

    private void UpdateChargingSituation()
    {
        _chargingSituation = MqttService.ChargingSituation;
        availabilityData = ChargingSituationManager.CalculateAvailabilityData(
            _chargingSituation.PowerFromPV,
            _chargingSituation.PowerFromBattery,
            _chargingSituation.PowerFromGrid);
        consumptionData = ChargingSituationManager.CalculateConsumptionData(
            _chargingSituation.HouseConsumptionPower - _chargingSituation.InsideCurrentChargingPower - _chargingSituation.OutsideCurrentChargingPower,
            _chargingSituation.PowerFromBattery, 
            _chargingSituation.PowerFromGrid,
            _chargingSituation.InsideCurrentChargingPower,
            _chargingSituation.OutsideCurrentChargingPower);
        InvokeAsync(StateHasChanged);
    }

    private void UpdateChargingSettings()
    {
        chargingSettings = MqttService.ChargingSettings;
        InvokeAsync(StateHasChanged);
    }

    private string FormatPower(int value)
    {
        return value.ToString("#,##0 W");
    }

    private async void ChargingOff(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 0;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }

    private async void ChargingLevel1(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 1;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }

    private async void ChargingLevel2(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 2;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }
    private async void ChargingLevel3(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 3;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }
    private async void ChargingLevel4(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 4;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }
    private async void ChargingLevel5(MouseEventArgs e)
    {
        chargingSettings.ChargingLevel = 5;
        await CommunicateSettings();
        InvokeAsync(StateHasChanged);
    }

    private async Task CommunicateSettings()
    {
        await MqttService.PublishAsync(
            "config/charging/settings",
            JsonSerializer.Serialize(chargingSettings),
            MqttQualityOfServiceLevel.AtLeastOnce,
        true);

    }
}
