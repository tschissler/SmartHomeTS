@page "/"

@using System.Text;
@using System.Collections.ObjectModel;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Data;
@using Azure.Data.Tables;
@using DataContracts

@rendermode InteractiveServer

<PageTitle>Temperaturanzeige</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>Raumklima</h1>
    <button class="btn btn-primary" @onclick="LoadData">Refresh Data</button>
</div>

<div class="container mt-4">
    <!-- Loading Spinner -->
    @if (isLoading)
    {
        <div class="spinner-container">
            <div class="spinner"></div> 
        </div>
    }

    <div class="row">
        @foreach (var partitionKey in PartitionKeys.Keys)
        {
            if (!partitionKey.Contains("temperature"))
            {
                continue;
            }
            <div class="col-md-3 col-6">
                <DataValueTextControl Value="@Data[partitionKey].Value"
                                      Unit="°C"
                                      Value2="@Data[partitionKey.Replace("_temperature", "_humidity")].Value"
                                      Unit2="%"
                                      LastUpdated="@Data[partitionKey].LocalTime"
                                      title="@PartitionKeys[partitionKey]">
                </DataValueTextControl>
            </div>
        }
        <div class="col-md-3 col-6">
            <div class="text-info title-text">
            Fenster Schlafzimmer: <br /> @(StatusWindowBedroomTop.ToLower() == "closed" && StatusWindowBedroomBottom.ToLower() == "closed"?"Geschlossen":(StatusWindowBedroomBottom.ToLower() == "open"?"Offen":"Gekippt"))
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">
        <DataChart 
            MinutesTableName="@MinutesTableName"
            HoursTableName="@HoursTableName"
            DaysTableName="@DaysTableName"
            StorageAccountName="@storageAccountName"
            StorageAccountKey="@SmartHomeHelpers.Configuration.Storage.SmartHomeStorageKey"
            StorageUri="@SmartHomeHelpers.Configuration.Storage.SmartHomeStorageUri"
            dataSeriesMetaData="@ChartPartitionKeys"
        ></DataChart>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    string storageAccountName = "smarthomestorageprod";
    string MinutesTableName = "SmartHomeClimateRawData";
    string HoursTableName = "SmartHomeClimateHourAggregationData";
    string DaysTableName = "SmartHomeClimateDailyAggregationData";
    string statusTableName = "SmartHomeStatusRawData";

    string StatusWindowBedroomTop = "closed";
    string StatusWindowBedroomBottom = "closed";

    private TableClient tableClient;
    private TableClient tableClient2;
    private Dictionary<string, DataValueTableEntity> Data = new();

    public List<DataSeriesMetaData> ChartPartitionKeys = new()
    {
        new DataSeriesMetaData { Id="1", Label = "Außen", PartitionKey = "1c50f3ab6224_temperature", IsChecked = true, Color = "blue" },
        new DataSeriesMetaData { Id="2", Label = "Wohnzimmer", PartitionKey = "1420381fb608_temperature", IsChecked = true, Color = "green" },
        new DataSeriesMetaData { Id="3", Label = "Schlafzimmer", PartitionKey = "88ff1305613c_temperature", IsChecked = true, Color = "magenta" },
        new DataSeriesMetaData { Id="4", Label = "Sauerteig", PartitionKey = "a86d2b286f24_temperature", IsChecked = true, Color = "brown" }
    };

    private Dictionary<string, string> PartitionKeys = new()
    {
        { "1c50f3ab6224_temperature", "Außen" },
        { "1420381fb608_temperature", "Wohnzimmer" },
        { "1c50f3ab6224_humidity", "Außen Luftfeuchte" },
        { "1420381fb608_humidity", "Wohnzimmer Luftfeuchte" },
        { "88ff1305613c_temperature", "Schlafzimmer" },
        { "88ff1305613c_humidity", "Schlafzimmer Luftfeuchte"},
        { "a86d2b286f24_temperature", "Sauerteig" },
        { "a86d2b286f24_humidity", "Sauerteig Luftfeuchte"},
    };

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        Data = new Dictionary<string, DataValueTableEntity>();
        tableClient = new TableClient(
            new Uri(SmartHomeHelpers.Configuration.Storage.SmartHomeStorageUri),
            MinutesTableName,
            new TableSharedKeyCredential(storageAccountName, SmartHomeHelpers.Configuration.Storage.SmartHomeStorageKey)
            );

        foreach (var partitionKey in PartitionKeys.Keys)
        {
            var queryString =
                $"PartitionKey eq '{partitionKey}' ";
            var query = tableClient.Query<DataValueTableEntity>(queryString, 1);
            if (query.Any())
            {
                Data.Add(partitionKey, query.First());
            }
        };

        tableClient2 = new TableClient(
            new Uri(SmartHomeHelpers.Configuration.Storage.SmartHomeStorageUri),
            statusTableName,
            new TableSharedKeyCredential(storageAccountName, SmartHomeHelpers.Configuration.Storage.SmartHomeStorageKey)
            );

        var queryString2 =
             $"PartitionKey eq '88ff1305613c_window_top' or PartitionKey eq '88ff1305613c_window_bottom' ";
        var query2 = tableClient2.Query<StringDataValueTableEntity>(queryString2, 1);
        if (query2.Any())
        {
            var top = query2.FirstOrDefault(i => i.PartitionKey == "88ff1305613c_window_top");
            var bottom = query2.FirstOrDefault(i => i.PartitionKey == "88ff1305613c_window_bottom");

            if (top != null)
            {
                StatusWindowBedroomTop = top.Value;
            }

            if (bottom != null)
            {
                StatusWindowBedroomBottom = bottom.Value;
            }
        }

        InvokeAsync(StateHasChanged);
    }
   
    private async Task CheckboxChanged(DataSeriesMetaData item)
    {
        // await LoadingSpinnerShow();
        // try
        // {
        //     if (!item.IsChecked)
        //     {
        //         item.IsChecked = true;
        //         var data = LoadData(item.PartitionKey, DateTime.UtcNow.AddHours(dataTimeRangeHours)).Result;
        //         ChartData.Add(item.PartitionKey, new ObservableCollection<DataValueTableEntity>(data.OrderBy(i => i.Time)));
        //     }
        //     else
        //     {
        //         item.IsChecked = false;
        //         if (ChartData.ContainsKey(item.PartitionKey))
        //         {
        //             ChartData.Remove(item.PartitionKey);
        //         }
        //     }
        // }
        // catch (Exception)
        // {
        //     throw;
        // }
        // finally
        // {
        //     await LoadingSpinnerHide();
        // }
    }


    public async Task LoadingSpinnerShow()
    {
        isLoading = true;
        await Task.Delay(5);
        InvokeAsync(StateHasChanged);
    }

    public async Task LoadingSpinnerHide()
    {
        isLoading = false;
        await Task.Delay(5);
        InvokeAsync(StateHasChanged);
    }
}