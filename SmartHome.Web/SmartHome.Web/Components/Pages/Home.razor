@page "/"

@using System.Text;
@using System.Collections.ObjectModel;
@using SmartHome.Web.Components.Libs;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Data;
@using Azure.Data.Tables;
@using DataContracts

@inject MqttController mqttController
@rendermode InteractiveServer

<PageTitle>Temperaturanzeige</PageTitle>

<div class="container mt-4">
    <!-- Title Section -->
    <h1 class="mb-4">Temperaturen</h1>

    <!-- Loading Spinner -->
    @if (isLoading)
    {
        <div class="spinner-container">
            <div class="spinner"></div> 
        </div>
    }

    <div class="container">
    <div class="row">
        <div class="col-sm-6 col-12">
            <DataValueTextControl Value="15.4" Unit="°C" LastUpdated="@DateTime.Now" title="Außen"></DataValueTextControl>
        </div>
        <div class="col-sm-6 col-12">
            <DataValueTextControl Value="21.5" Unit="°C" LastUpdated="@DateTime.Now" title="Wohnzimmer"></DataValueTextControl>
        </div>
    </div>
</div>

    <!-- Checkbox Filters -->
    <div class="row mb-3">
        <div class="col">
            @foreach (var item in PartitionKeys)
            {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="@item.Id" checked="@item.IsChecked" @onchange="() => CheckboxChanged(item)" />
                    <label class="form-check-label" for="@item.Id">@item.Label</label>
                </div>
            }
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="mb-3">
        <div class="btn-group" role="group">
            <button class="btn btn-primary" @onclick="RefreshData">Reload Data</button>
            <button class="btn btn-secondary" @onclick="LoadMoreData">Load More Data</button>
        </div>
        <div class="btn-group ms-2" role="group">
            <button class="btn btn-info" @onclick="HiResData">Minuten</button>
            <button class="btn btn-warning" @onclick="LoResData">Stunden</button>
        </div>
        <div class="form-check form-switch d-inline-block ms-3">
            <input class="form-check-input" type="checkbox" id="autoUpdate" checked="@autoUpdate" @onchange="() => AutoUpdateChanged()" />
            <label class="form-check-label" for="autoUpdate">Auto-Update</label>
        </div>
    </div>
<SfChart>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="dd.MMM. HH.mm" LabelRotation="45"></ChartPrimaryXAxis>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>

    <ChartSeriesCollection>
        @foreach (var item in PartitionKeys.Where(p => p.IsChecked))
        {
            <ChartSeries Name="@item.Label" XName="LocalTime" YName="Value" Type="ChartSeriesType.Line" DataSource="@ChartData[item.PartitionKey]" Fill="@item.Color">
                <ChartSeriesAnimation Enable="true"></ChartSeriesAnimation>
                <ChartMarker Visible="true" Width="3" Height="3" Shape="ChartShape.Circle">
                </ChartMarker>

            </ChartSeries>
        }
    </ChartSeriesCollection>
    <ChartLegendSettings Visible="true" />
</SfChart>
</div>

@code {
    private bool isLoading = false;
    private bool autoUpdate = false;
    private int dataTimeRangeHours = -1;
    private int dataTimeIntervalHours = -1;
    public Dictionary<string, ObservableCollection<DataValueTableEntity>> ChartData = new();
    TableClient table;
    string storageAccountName = "smarthomestorageprod";
    string hiResTableName = "SmartHomeClimateRawData";
    string loResTableName = "SmartHomeClimateHourAggregationData";

    private System.Timers.Timer autoRefreshTimer = new System.Timers.Timer(60000);

    public List<CheckableItem> PartitionKeys = new()
    {
        new CheckableItem { Id="1", Label = "Außentemperatur", PartitionKey = "1c50f3ab6224_temperature", IsChecked = false, Color = "blue" },
        new CheckableItem { Id="2", Label = "M3 Gästezimmer", PartitionKey = "44dbf3ab6224_temperature", IsChecked = false, Color = "grey" },
        new CheckableItem { Id="3", Label = "M3 Esszimmer", PartitionKey = "a86d2b286f24_temperature", IsChecked = false, Color = "magenta" }, 
        new CheckableItem { Id="4", Label = "Batteriesensor", PartitionKey = "1420381fb608_temperature", IsChecked = false, Color = "green" }
    };

    protected override void OnInitialized()
    {
        table = new TableClient(
            new Uri(SmartHomeHelpers.Configuration.Storage.SmartHomeStorageUri),
            hiResTableName,
            new TableSharedKeyCredential(storageAccountName, SmartHomeHelpers.Configuration.Storage.SmartHomeStorageKey)
        );
        autoRefreshTimer.Elapsed += async (sender, e) => await FetchNewData();
    }

    private async Task HiResData()
    {
        table = new TableClient(
            new Uri(SmartHomeHelpers.Configuration.Storage.SmartHomeStorageUri),
            hiResTableName,
            new TableSharedKeyCredential(storageAccountName, SmartHomeHelpers.Configuration.Storage.SmartHomeStorageKey)
        );
        dataTimeRangeHours = -1;
        dataTimeIntervalHours = -1;
        RefreshData();
    }

    private async Task LoResData()
    {
        table = new TableClient(
            new Uri(SmartHomeHelpers.Configuration.Storage.SmartHomeStorageUri),
            loResTableName,
            new TableSharedKeyCredential(storageAccountName, SmartHomeHelpers.Configuration.Storage.SmartHomeStorageKey)
        );
        dataTimeRangeHours = -24;
        dataTimeIntervalHours = -24;
        RefreshData();
    }

    private async Task AutoUpdateChanged()
    {
        autoUpdate = !autoUpdate;
        if (autoUpdate)
        {
            autoRefreshTimer.Start();
        }
        else
        {
            autoRefreshTimer.Stop();
        }
    }

    private async Task<List<DataValueTableEntity>> LoadData(string partitionKey, DateTime startTime, DateTime endTime = new DateTime())
    {
        var queryString =
            $"PartitionKey eq '{partitionKey}' " +
            $"and Time ge datetime'{startTime.ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")}'";
        if (endTime != new DateTime())
        {
            queryString += $" and Time le datetime'{endTime.ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")}'";
        }
        var query = table.Query<DataValueTableEntity>(queryString);
        return query.ToList();
    }
    
    private async Task FetchNewData()
    {
        foreach (var item in PartitionKeys.Where(p => p.IsChecked))
        {
            var latestValueTime = ChartData[item.PartitionKey].Max(i => i.Time);
            var data = LoadData(item.PartitionKey, latestValueTime).Result;

            foreach(var resultItem in data.OrderBy(i => i.Time))
            {
                ChartData[item.PartitionKey].Add(resultItem);
            }
        }

        // Notify the component to refresh the UI
        InvokeAsync(StateHasChanged);
    }
    
    private async Task CheckboxChanged(CheckableItem item)
    {
        await LoadingSpinnerShow();
        try
        {
            if (!item.IsChecked)
            {
                item.IsChecked = true;
                var data = LoadData(item.PartitionKey, DateTime.UtcNow.AddHours(dataTimeRangeHours)).Result;
                ChartData.Add(item.PartitionKey, new ObservableCollection<DataValueTableEntity>(data.OrderBy(i => i.Time)));
            }
            else
            {
                item.IsChecked = false;
                if (ChartData.ContainsKey(item.PartitionKey))
                {
                    ChartData.Remove(item.PartitionKey);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            await LoadingSpinnerHide();
        }
    }

    private async Task RefreshData()
    {
        await LoadingSpinnerShow();

        try
        {
            ChartData = new();
            foreach (var item in PartitionKeys.Where(p => p.IsChecked))
            {
                var data = LoadData(item.PartitionKey, DateTime.UtcNow.AddHours(dataTimeRangeHours)).Result;
                ChartData.Add(item.PartitionKey, new ObservableCollection<DataValueTableEntity>(data.OrderBy(i => i.Time)));
            }

            // Notify the component to refresh the UI
            InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            await LoadingSpinnerHide();
        }
    }

    public async Task LoadingSpinnerShow()
    {
        isLoading = true;
        await Task.Delay(5);
        InvokeAsync(StateHasChanged);
    }

    public async Task LoadingSpinnerHide()
    {
        isLoading = false;
        await Task.Delay(5);
        InvokeAsync(StateHasChanged);
    }
    
    private async Task LoadMoreData(MouseEventArgs e)
    {
        await LoadingSpinnerShow();
        try
        {
            dataTimeRangeHours += dataTimeIntervalHours;

            foreach (var item in PartitionKeys.Where(p => p.IsChecked))
            {
                var earliestTimestamp = ChartData[item.PartitionKey].First().Time;

                var data = LoadData(item.PartitionKey, DateTime.UtcNow.AddHours(dataTimeRangeHours), earliestTimestamp).Result;

                foreach(var resultItem in data.OrderByDescending(i => i.Time))
                {
                    ChartData[item.PartitionKey].Insert(0,resultItem);
                }
            }
            InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            await LoadingSpinnerHide();
        }
    }
}