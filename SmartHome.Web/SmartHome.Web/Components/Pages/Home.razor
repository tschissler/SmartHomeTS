@page "/"

@using System.Text;
@using System.Collections.ObjectModel;
@using SmartHome.Web.Components.Libs;
@using SmartHome.Web.DataObjects;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Data;
@using Azure.Data.Tables;
@using DataContracts

@inject MqttController mqttController
@rendermode InteractiveServer

<PageTitle>Temperaturanzeige</PageTitle>

<h1>Temperatur M3</h1>
@if (isLoading)
{
    <div class="spinner-container">
        <div class="spinner"></div> 
    </div>
}
<div class="d-flex flex-row">
    @foreach (var item in PartitionKeys)
    {
        <div class="me-3">
            <input type="checkbox" checked="@item.IsChecked" @onchange="() => CheckboxChanged(item)" />
            <label>@item.Label</label>
        </div>
    }
</div>
<div class="d-flex flex-row">
    <div class="me-3">
        <button @onclick="RefreshData">Reload Data</button>
    </div>
    <div class="me-3">
        <input type="checkbox" checked="@autoUpdate" @onchange="() => AutoUpdateChanged()" />
        <label>Auto-Update</label>
    </div>
    <div class="me-3">
        <button @onclick="LoadMoreData">Load More Data</button>
    </div>
</div>

<SfChart>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>

    <ChartSeriesCollection>
        @foreach (var item in PartitionKeys.Where(p => p.IsChecked))
        {
            <ChartSeries Name="@item.Label" XName="LocalTime" YName="Value" Type="ChartSeriesType.Line" DataSource="@ChartData[item.PartitionKey]">
                <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                <ChartMarker Visible="true" Width="3" Height="3" Shape="ChartShape.Circle">
                </ChartMarker>

            </ChartSeries>
        }
    </ChartSeriesCollection>
    <ChartLegendSettings Visible="true" />
</SfChart>


@code {
    private bool isLoading = false;
    private bool autoUpdate = false;
    public Dictionary<string, ObservableCollection<DataValueTableEntity>> ChartData = new();
    TableClient table;
    private System.Timers.Timer autoRefreshTimer = new System.Timers.Timer(60000);

    public List<CheckableItem> PartitionKeys = new()
    {
        new CheckableItem { Label = "Außentemperatur", PartitionKey = "1c50f3ab6224_temperature", IsChecked = false },
        new CheckableItem { Label = "M3 Gästezimmer", PartitionKey = "44dbf3ab6224_temperature", IsChecked = false },
        new CheckableItem { Label = "M3 Esszimmer", PartitionKey = "a86d2b286f24_temperature", IsChecked = false },
        new CheckableItem { Label = "Batteriesensor", PartitionKey = "1420381fb608_temperature", IsChecked = false }
    };

    protected override void OnInitialized()
    {
        string connectionString = "DefaultEndpointsProtocol=https;AccountName=smarthometsstorage;AccountKey=yRZ84NCODris5jSJpP1tbZO1zxVkTTRSEsn4Yiu5TNyKFIToLOaMDe6whunduEzFT3tFwm95X4lcACDbRQDdPQ==;TableEndpoint=https://smarthometsstorage.table.cosmos.azure.com:443/;";
        string tableName = "SmartHomeData";

        table = new TableClient(connectionString, tableName);

        autoRefreshTimer.Elapsed += async (sender, e) => await FetchNewData();
    }

    private async Task AutoUpdateChanged()
    {
        autoUpdate = !autoUpdate;
        if (autoUpdate)
        {
            autoRefreshTimer.Start();
        }
        else
        {
            autoRefreshTimer.Stop();
        }
    }

    private async Task FetchNewData()
    {
        foreach (var item in PartitionKeys.Where(p => p.IsChecked))
        {
            var latestValueTimeStamp = ChartData[item.PartitionKey].Max(i => i.Timestamp);
            // Read data from Azure Table Storage
            var query = table.Query<DataValueTableEntity>()
                .Where(e => e.PartitionKey == item.PartitionKey && e.Timestamp > latestValueTimeStamp)
                .OrderByDescending(e => e.Timestamp)
                .Take(100);

            foreach(var resultItem in query.ToList().OrderBy(i => i.Time))
            {
                ChartData[item.PartitionKey].Add(resultItem);
            }
        }

        // Notify the component to refresh the UI
        InvokeAsync(StateHasChanged);
    }
    private async Task CheckboxChanged(CheckableItem item)
    {
        await LoadingSpinnerShow();
        try
        {
            if (!item.IsChecked)
            {
                item.IsChecked = true;
                // Read data from Azure Table Storage
                var query = table.Query<DataValueTableEntity>()
                    .Where(e => e.PartitionKey == item.PartitionKey)
                    .OrderByDescending(e => e.Timestamp)
                    .Take(100);
                ChartData.Add(item.PartitionKey, new ObservableCollection<DataValueTableEntity>(query.ToList().OrderBy(i => i.Time)));

                // Notify the component to refresh the UI
                InvokeAsync(StateHasChanged);
            }
            else
            {
                item.IsChecked = false;
                if (ChartData.ContainsKey(item.PartitionKey))
                {
                    ChartData.Remove(item.PartitionKey);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            await LoadingSpinnerHide();
        }
    }

    private async Task RefreshData()
    {
        await LoadingSpinnerShow();

        try
        {
            ChartData = new();
            foreach (var item in PartitionKeys.Where(p => p.IsChecked))
            {
                // Read data from Azure Table Storage
                var query = table.Query<DataValueTableEntity>()
                    .Where(e => e.PartitionKey == item.PartitionKey)
                    .OrderByDescending(e => e.Timestamp)
                    .Take(100);
                ChartData.Add(item.PartitionKey, new ObservableCollection<DataValueTableEntity>(query.ToList().OrderBy(i => i.Time)));
            }

            // Notify the component to refresh the UI
            InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            await LoadingSpinnerHide();
        }
    }

    public async Task LoadingSpinnerShow()
    {
        isLoading = true;
        await Task.Delay(1);

    }

    public async Task LoadingSpinnerHide()
    {
        isLoading = false;
        await Task.Delay(1);

    }
    private async Task LoadMoreData(MouseEventArgs e)
    {
        await LoadingSpinnerShow();
        try
        {
            foreach (var item in PartitionKeys.Where(p => p.IsChecked))
            {
                var earliestTimestamp = ChartData[item.PartitionKey].First().Timestamp;
                // Read data from Azure Table Storage
                var query = table.Query<DataValueTableEntity>()
                    .Where(e => e.PartitionKey == item.PartitionKey && e.Timestamp < earliestTimestamp)
                    .OrderByDescending(e => e.Timestamp)
                    .Take(100);

                foreach(var resultItem in query.ToList().OrderByDescending(i => i.Time))
                {
                    ChartData[item.PartitionKey].Insert(0,resultItem);
                }
            }
            InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            await LoadingSpinnerHide();
        }
    }
}