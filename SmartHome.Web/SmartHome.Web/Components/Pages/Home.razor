@page "/"

@using System.Text;
@using System.Collections.ObjectModel;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Data;
@using Azure.Data.Tables;
@using DataContracts

@rendermode InteractiveServer

<PageTitle>Temperaturanzeige</PageTitle>

<div class="container mt-4">
    <!-- Title Section -->
    <h1 class="mb-4">Klimadaten</h1>

    <!-- Loading Spinner -->
    @if (isLoading)
    {
        <div class="spinner-container">
            <div class="spinner"></div> 
        </div>
    }

    <div class="container">
    <div class="row">
        <div class="col-sm-6 col-12">
            <DataValueTextControl Value="15.4" Unit="°C" LastUpdated="@DateTime.Now" title="Außen"></DataValueTextControl>
        </div>
        <div class="col-sm-6 col-12">
            <DataValueTextControl Value="21.5" Unit="°C" LastUpdated="@DateTime.Now" title="Wohnzimmer"></DataValueTextControl>
        </div>
    </div>
</div>

    <!-- Checkbox Filters -->
    <div class="row mb-3">
        <div class="col">
            @foreach (var item in PartitionKeys)
            {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="@item.Id" checked="@item.IsChecked" @onchange="() => CheckboxChanged(item)" />
                    <label class="form-check-label" for="@item.Id">@item.Label</label>
                </div>
            }
        </div>
    </div>
    <div class="row mb-3">
        <DataChart 
            HiResTableName="@hiResTableName" 
            LoResTableName="@loResTableName"
            StorageAccountName="@storageAccountName"
            StorageAccountKey="@SmartHomeHelpers.Configuration.Storage.SmartHomeStorageKey"
            StorageUri="@SmartHomeHelpers.Configuration.Storage.SmartHomeStorageUri"
            dataSeriesMetaData="@PartitionKeys"
        ></DataChart>
    </div>
</div>

@code {
    private bool isLoading = false;
    string storageAccountName = "smarthomestorageprod";
    string hiResTableName = "SmartHomeClimateRawData";
    string loResTableName = "SmartHomeClimateHourAggregationData";

    public List<DataSeriesMetaData> PartitionKeys = new()
    {
        new DataSeriesMetaData { Id="1", Label = "Außentemperatur", PartitionKey = "1c50f3ab6224_temperature", IsChecked = true, Color = "blue" },
        new DataSeriesMetaData { Id="2", Label = "M3 Gästezimmer", PartitionKey = "44dbf3ab6224_temperature", IsChecked = false, Color = "grey" },
        new DataSeriesMetaData { Id="3", Label = "M3 Esszimmer", PartitionKey = "a86d2b286f24_temperature", IsChecked = false, Color = "magenta" }, 
        new DataSeriesMetaData { Id="4", Label = "Batteriesensor", PartitionKey = "1420381fb608_temperature", IsChecked = true, Color = "green" }
    };

    protected override void OnInitialized()
    {

    }
   
    private async Task CheckboxChanged(DataSeriesMetaData item)
    {
        // await LoadingSpinnerShow();
        // try
        // {
        //     if (!item.IsChecked)
        //     {
        //         item.IsChecked = true;
        //         var data = LoadData(item.PartitionKey, DateTime.UtcNow.AddHours(dataTimeRangeHours)).Result;
        //         ChartData.Add(item.PartitionKey, new ObservableCollection<DataValueTableEntity>(data.OrderBy(i => i.Time)));
        //     }
        //     else
        //     {
        //         item.IsChecked = false;
        //         if (ChartData.ContainsKey(item.PartitionKey))
        //         {
        //             ChartData.Remove(item.PartitionKey);
        //         }
        //     }
        // }
        // catch (Exception)
        // {
        //     throw;
        // }
        // finally
        // {
        //     await LoadingSpinnerHide();
        // }
    }


    public async Task LoadingSpinnerShow()
    {
        isLoading = true;
        await Task.Delay(5);
        InvokeAsync(StateHasChanged);
    }

    public async Task LoadingSpinnerHide()
    {
        isLoading = false;
        await Task.Delay(5);
        InvokeAsync(StateHasChanged);
    }
}