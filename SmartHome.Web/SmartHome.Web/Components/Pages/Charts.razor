@using InfluxDB.Client
@using InfluxDB.Client.Api.Domain
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.DropDowns
@using System.Collections.ObjectModel
@inject NavigationManager Navigation

@page "/charts"

<PageTitle>Diagramme</PageTitle>

<div>
    <h3>Diagramme</h3>

    <div class="mb-3 col-lg-12">
        <label for="timeframe">Select Timeframe:</label>
        <SfDropDownList TValue="string" TItem="TimeFrame" @bind-Value="@selectedTimeframe" DataSource="@timeframes" Width="300px">
            <DropDownListEvents TValue="string" TItem="TimeFrame" ValueChange="OnTimeframeChanged"/>
            <DropDownListFieldSettings Text="Name" Value="Value"/>
        </SfDropDownList>
    </div>

    <div class="control-section" align="center">
        <SfChart title="Temperaturen" @ref="lineChart" Width="100%">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
            <ChartPrimaryYAxis LabelFormat="{value}°C"></ChartPrimaryYAxis>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
            <ChartSeriesCollection>
                @foreach (var series in temperatureChartSeries)
                {
                    <ChartSeries DataSource="@series.Data" XName="@nameof(ChartDataPoint.Time)" YName="@nameof(ChartDataPoint.Value)" Type="ChartSeriesType.Line" Name="@series.Name">
                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                    </ChartSeries>
                }
            </ChartSeriesCollection>
        </SfChart>
    </div>
    <div class="control-section" align="center">
        <SfChart title="Luftfeuchtigkeit" @ref="lineChart" Width="100%">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
            <ChartPrimaryYAxis LabelFormat="{value}%"></ChartPrimaryYAxis>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
            <ChartSeriesCollection>
                @foreach (var series in humidityChartSeries)
                {
                    <ChartSeries DataSource="@series.Data" XName="@nameof(ChartDataPoint.Time)" YName="@nameof(ChartDataPoint.Value)" Type="ChartSeriesType.Line" Name="@series.Name">
                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                    </ChartSeries>
                }
            </ChartSeriesCollection>
        </SfChart>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="LoadChartData">Reload Data</button>
    </div>
</div>

@code {
    private SfChart lineChart;
    private string selectedTimeframe = "3h"; // Default timeframe
    private ObservableCollection<ChartSeriesData> temperatureChartSeries = new ObservableCollection<ChartSeriesData>();
    private ObservableCollection<ChartSeriesData> humidityChartSeries = new ObservableCollection<ChartSeriesData>();
    private List<TimeFrame> timeframes = new List<TimeFrame>
    {
        new TimeFrame { Name = "Letzte 1 Stunde", Value = "1h" },
        new TimeFrame { Name = "Letzte 3 Stunden", Value = "3h" },
        new TimeFrame { Name = "Letzte 6 Stunden", Value = "6h" },
        new TimeFrame { Name = "Letzte 12 Stunden", Value = "12h" },
        new TimeFrame { Name = "Letzte 24 Stunden", Value = "24h" }
    };

    // Chart data model
    public class ChartDataPoint
    {
        public DateTime Time { get; set; }
        public double Value { get; set; }
    }

    public class TimeFrame
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public class ChartSeriesData
    {
        public string Name { get; set; }
        public ObservableCollection<ChartDataPoint> Data { get; set; } = new ObservableCollection<ChartDataPoint>();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadChartData();
    }

    private async Task LoadChartData()
    {
        try
        {
            using var client = new InfluxDBClient("http://smarthomepi2:32086?org=smarthome", "4s2KAy_B9R2Z_0D5hEbzqFW69cps1ljWrplHwwSX_qxIIWgnnu9sTTRyPDlUFP-SO62DLJiuues5q8ObzlI6Ug==");
            var queryApi = client.GetQueryApi();

            await LoadMeasurementData(queryApi, "temperatur", temperatureChartSeries);
            await LoadMeasurementData(queryApi, "luftfeuchtigkeit", humidityChartSeries);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chart data: {ex.Message}");
        }
    }

    private async Task LoadMeasurementData(QueryApi queryApi, string measurement, ObservableCollection<ChartSeriesData> chartSeries)
    {
        var fluxQuery = $@"
            from(bucket: ""SmartHomeData"")
              |> range(start: -{selectedTimeframe})
              |> filter(fn: (r) => r[""_measurement""] == ""{measurement}"")
              |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)
              |> yield(name: ""mean"")
        ";

        var tables = await queryApi.QueryAsync(fluxQuery);

        chartSeries.Clear();

        foreach (var table in tables)
        {
            var seriesData = new ChartSeriesData
                {
                    Name = table.Records[0].GetValueByKey("location").ToString() ?? ""
                };
            foreach (var record in table.Records)
            {
                seriesData.Data.Add(new ChartDataPoint
                    {
                        Time = record.GetTime()?.ToDateTimeUtc() ?? DateTime.MinValue,
                        Value = Convert.ToDouble(record.GetValueByKey("_value"))
                    });
            }
            chartSeries.Add(seriesData);
        }
    }

    public async Task OnTimeframeChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, TimeFrame> args)
    {
        selectedTimeframe = args.ItemData?.Value??"-3h";
        await LoadChartData();
    }
}