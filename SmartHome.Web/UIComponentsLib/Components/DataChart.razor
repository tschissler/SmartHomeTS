@using System.Collections.ObjectModel;
@using DataContracts;
@using Azure.Data.Tables;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Data;

<!-- Action Buttons -->
<div class="w-100">
    <div class="btn-group" role="group">
        <button class="btn btn-primary" @onclick="RefreshData">Neu laden</button>
        <button class="btn btn-secondary" @onclick="LoadMoreData">Frühere Daten laden</button>
    </div>
    <div class="btn-group ms-2" role="group">
        <button class="btn btn-info" @onclick="ShowMinuteData">Minuten</button>
        <button class="btn btn-warning" @onclick="ShowHourData">Stunden</button>
        <button class="btn btn-warning" @onclick="ShowDayData">Tage</button>
    </div>
@*         <div class="form-check form-switch d-inline-block ms-3">
        <input class="form-check-input" type="checkbox" id="autoUpdate" checked="@autoUpdate" @onchange="() => AutoUpdateChanged()" />
        <label class="form-check-label" for="autoUpdate">Auto-Update</label>
    </div> *@
</div>
<div class="w-100">
    <SfChart Width="100%">
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="dd.MMM. HH.mm" LabelRotation="45"></ChartPrimaryXAxis>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>

        <ChartSeriesCollection>
            @foreach (var item in dataSeriesMetaData.Where(p => p.IsChecked))
            {
                if (ChartData.ContainsKey(item.PartitionKey))
                {
                    <ChartSeries Name="@item.Label" XName="LocalTime" YName="Value" Type="ChartSeriesType.Line" DataSource="@ChartData[item.PartitionKey]" Fill="@item.Color">
                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                        <ChartMarker Visible="true" Width="3" Height="3" Shape="ChartShape.Circle">
                        </ChartMarker>
                    </ChartSeries>
                    if (ChartData[item.PartitionKey].Any(i => i.MaxValue != null))
                    {
                        <ChartSeries DataSource="@ChartData[item.PartitionKey]" 
                            XName="LocalTime" High="MaxValue" Low="MinValue" Type="ChartSeriesType.Hilo" Fill="@item.Color">
                        </ChartSeries>
                    }
                }
            }
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="true" />
    </SfChart>
</div>

@code {
    [Parameter]
    public string MinutesTableName { get; set; } = "SmartHomeClimateRawData";
    [Parameter]
    public string HoursTableName { get; set; } = "SmartHomeClimateHourAggregationData";
    [Parameter]
    public string DaysTableName { get; set; } = "SmartHomeClimateDayAggregationData";
    [Parameter]
    public string StorageAccountName { get; set; } = "smarthomestorageprod";
    [Parameter]
    public string StorageAccountKey { get; set; }
    [Parameter]
    public string StorageUri { get; set; }
    [Parameter]
    public List<DataSeriesMetaData> dataSeriesMetaData { get; set; }

    public Dictionary<string, ObservableCollection<DataValueTableEntity>> ChartData = new();
    TableClient table;

    private bool autoUpdate = false;
    private System.Timers.Timer autoRefreshTimer = new System.Timers.Timer(60000);

    private int dataTimeRangeHours = -1;
    private int dataTimeIntervalHours = -1;

    protected override void OnInitialized()
    {
        table = new TableClient(
            new Uri(StorageUri),
            MinutesTableName,
            new TableSharedKeyCredential(StorageAccountName, StorageAccountKey)
        );

        autoRefreshTimer.Elapsed += async (sender, e) => await FetchNewData();
        RefreshData();
    }

    private async Task AutoUpdateChanged()
    {
        autoUpdate = !autoUpdate;
        if (autoUpdate)
        {
            autoRefreshTimer.Start();
        }
        else
        {
            autoRefreshTimer.Stop();
        }
    }

    private async Task FetchNewData()
    {
        foreach (var item in dataSeriesMetaData.Where(p => p.IsChecked))
        {
            var latestValueTime = ChartData[item.PartitionKey].Max(i => i.Time);
            var data = LoadData(item.PartitionKey, latestValueTime).Result;

            foreach (var resultItem in data.OrderBy(i => i.Time))
            {
                ChartData[item.PartitionKey].Add(resultItem);
            }
        }

        // Notify the component to refresh the UI
        InvokeAsync(StateHasChanged);
    }

    private async Task<List<DataValueTableEntity>> LoadData(string partitionKey, DateTime startTime, DateTime endTime = new DateTime())
    {
        var queryString =
            $"PartitionKey eq '{partitionKey}' " +
            $"and Time ge datetime'{startTime.ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")}'";
        if (endTime != new DateTime())
        {
            queryString += $" and Time le datetime'{endTime.ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")}'";
        }
        var query = table.Query<DataValueTableEntity>(queryString);
        return query.ToList();
    }

    private async Task LoadMoreData()
    {
        dataTimeRangeHours += dataTimeIntervalHours;

        foreach (var item in dataSeriesMetaData.Where(p => p.IsChecked))
        {
            var earliestTimestamp = ChartData[item.PartitionKey].First().Time;

            var data = LoadData(item.PartitionKey, DateTime.UtcNow.AddHours(dataTimeRangeHours), earliestTimestamp).Result;

            foreach(var resultItem in data.OrderByDescending(i => i.Time))
            {
                ChartData[item.PartitionKey].Insert(0,resultItem);
            }
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task RefreshData()
    {
        ChartData = new();
        foreach (var item in dataSeriesMetaData.Where(p => p.IsChecked))
        {
            var data = LoadData(item.PartitionKey, DateTime.UtcNow.AddHours(dataTimeRangeHours)).Result;
            ChartData.Add(item.PartitionKey, new ObservableCollection<DataValueTableEntity>(data.OrderBy(i => i.Time)));
        }

        InvokeAsync(StateHasChanged);
    }

    private async Task ShowMinuteData()
    {
        table = new TableClient(
            new Uri(StorageUri),
            MinutesTableName,
            new TableSharedKeyCredential(StorageAccountName, StorageAccountKey)
        );
        dataTimeRangeHours = -1;
        dataTimeIntervalHours = -1;
        RefreshData();
    }

    private async Task ShowHourData()
    {
        table = new TableClient(
            new Uri(StorageUri),
            HoursTableName,
            new TableSharedKeyCredential(StorageAccountName, StorageAccountKey)
        );
        dataTimeRangeHours = -24;
        dataTimeIntervalHours = -24;
        RefreshData();
    }

    private async Task ShowDayData()
    {
        table = new TableClient(
            new Uri(StorageUri),
            DaysTableName,
            new TableSharedKeyCredential(StorageAccountName, StorageAccountKey)
        );
        dataTimeRangeHours = -24*30;
        dataTimeIntervalHours = -24*30;
        RefreshData();
    }
}
